top 50 question which asked question?

what is nodejs?
how is better then other language why choose nodejs for backend ??
what is nodejs?  
What Are The Key Features Of NodeJs?
event loop?  How does Node.js work?
core module ?
What are streams in Nodejs Explain the different types of streams present in Nodejs What is Piping in Node?
new promise practical
how to handle multile req if nodejs single thread?  how to handle multile user reqeust Handle
fork Differentiate between spawn and fork methods in Nodejs?   15. Differentiate between spawn and fork methods in Nodejs?
callback vs callback hell How can you avoid callback hells
middleware with example
asynchoronous vs synchoronous
What Is EventEmitter In NodeJs
eventloop  libuv  
packages json vs packages.lock.json
List down the major security implementations within Node.js
repl example
buffer example
Can you write CRUD operations in Node js without using frameworks?  practical
Explain the purpose of module exports?
restful API
what is npm? 
cluster
worker thread  ? doubt
how nodjes fast executated on code using v8
how to handle multi thread in python practical than its better than nodejs
API functions in Node?
What Is A Child_process Module In NodeJs?
how is better then other language why choose nodejs for backend?


//important
with example deeply.
promise example
with async await
array method example
callback example
between spawn() and fork() methods in Node.js?
Explain libuv?
load balancer?
fork Differentiate between spawn and eventloop  libuv
thread pool type How does Nodejs handle the child threads? how many type of threads?
16 What are JWT?
17 What are different authentication methods?
18 What are disadvantages of using session based authentication?
19 What are disadvantages of using jwt based authentication?



problem solve question
soring
prime number
binary search
find second largest number
sorted value unique value
fibonasis value















//promise
const myPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    const data = "Promise resolved with some data";
    if (data) {
      resolve(data);
    } else {
    setTimeout(() => {
      const data = "Promise resolved with some data";  //condition we can
      if(data){
        resolve(data);
      }else{
      reject(new Error("Promise rejected with an error"));
    }
  }, 2000);
}
});

myPromise.then((result) => {
  console.log("Promise fulfilled:", result);
})
  .catch((error) => {
    console.error("Promise rejected:", error.message);
  });
// myPromise.then((result) => {
//     console.log("Promise fulfilled:", result);
// })
// .catch((error) => {
//     console.error("Promise rejected:", error.message);
// });


// //with Async/Await: used
// async function asyncFunction() {
//     try {
//       const result = await myPromise;
//       console.log(result);
//     } catch (error) {
//       console.error(error);
//     }
//   }
//   asyncFunction();


  

// Promise.all        :- method is settled with only resolved promises,so if any promise reutrns error then it won't work
// Promise.allSettled :- it is used for handling an array of promises and waiting for all of them to settle (resolve or reject).
// Promise.any        :-any and race same which ass soon as resolve
// Promise.race       :-is used to race multiple promises and return the value of the first promise (either resolved or rejected) to complete
// Promise.resolve    
// Promise.reject




// let p1= new Promise((resolve, rejected)=>{
//     setTimeout(() => {
//         resolve("promise1")
//     }, 3*1000);
// })

// let p2= new Promise((resolve, rejected)=>{
//     let smsdata="any single promise error show error"
//     setTimeout(() => {
//         resolve("smsdata")
//     }, 4*1000);
// })

// let p3= new Promise((resolve, rejected)=>{
//     setTimeout(() => {
//         rejected("promise3")
//     }, 4*1000);
// })

// let p4= new Promise((resolve, rejected)=>{
//     setTimeout(() => {
//         resolve("promise4")
//     }, 2*1000);
// })

// // any rejcted show rejected error not work resolve and resolve sequence
// Promise.any:- This method doesn't wait for all the promises to resolve. It is done when any one of the promises is settled.

// let total=0;
// Promise.allSettled([p1,p2,p3,p4])
// .then((result)=>{
//     console.log("result", result)
//     for (let i=0; i<result.length; i++){
//         total+=i
//     }
//     console.log(`total is  ${total}`)
// })
// .catch((error)=>{
//     console.log(`error promise ${error}`)
// })


// //return each promise if reject then it also show resolve
// Promise.all([
//     p1.catch(error=>{return error}),
//     p2.catch(error=>{return error}),
//     p3.catch(error=>{return error}),
//     p4.catch(error=>{return error}),
// ])
// .then((result)=>{
//     for (var i of result){
//         total+=i
//     }
//     console.log(`total is  ${total}`)
// })


// all() method is settled with only resolved promises, so if any promise reutrns error then it won't work
//return each promise if reject then it also show resolve
// Promise.all([p1,p2,p3,p4])

// Promise.allSettled([p1,p2,p3,p4])
// allSettled() method waits for all promises regards of their state & returns Promise at the ends

//race() any any() same method returns a promise as soon as any of the promise return list provide which less time.
// Promise.allSettled([p1,p2,p3,p4])
// .then((result)=>{
//     // for (var i of result){
//     //     console.log("result", i)
//     //     total+= parseInt (i.count)
//     // }
//     // console.log(`total is  ${result}`)
//     console.log("result", result)
// })
// .catch((err)=>{
//     console.log("error", err)
// })


  




  




// let p1= new Promise((resolve, rejected)=>{
//     resolve("a")
// })

// let p2= new Promise((resolve, rejected)=>{
//     let smsdata="b"
//     setTimeout(() => {
//         resolve(smsdata)
//     }, 4*1000);
// })

// let p3= new Promise((resolve, rejected)=>{
//     setTimeout(() => {
//         resolve("c")
//     }, 1*1000);
// })

// let p4= new Promise((resolve, rejected)=>{
//     resolve("d")
// })

// Promise.all([p1,p2,p3,p4])
// .then((result)=>{
//     console.log(`total is  ${result}`)
// })
// .catch((error)=>{
//     console.log(`error promise ${error}`)
// })



