Explain Vertical Scaling and Horizontal Scaling
Scaling Horizontal and Vertical mysql 
Difference between Where and Having Clause in SQL : 


primary and unique key and forign key?

primary key:-
Cannot contain NULL values.
Every table should have one primary key.
A primary key automatically creates a clustered index in most databases
its auto increament

unique key:-
Ensures that all values in the column are unique, but null values are allowed.
Can contain one or more NULL values.
a column or set of columns must be unique, but it's not required to identify a record.


Key Differences:
Feature	Primary Key	Unique Constraint
Uniqueness	Must be unique	Must be unique
Nullability	Cannot contain NULL values	Can contain NULL values
Number per Table	Only one primary key per table	Multiple unique constraints per table
Purpose	Used to uniquely identify each record	Used to ensure unique values in a column
Index Type	Usually creates a clustered index	Usually creates a non-clustered index


Key Differences:
Feature	DROP	DELETE	TRUNCATE
Removes	Entire table (or object)	Specific rows or all rows	All rows from the table
Table structure	Table is removed entirely	Table remains intact	Table remains intact
Rollback	Generally, cannot be rolled back	Can be rolled back (in a transaction)	Depends on DBMS
Logging	Not logged	Logs each row deletion	Doesn't log individual rows
Speed	Slow for large tables (depends)	Slower for large datasets	Faster for large datasets
Condition	Cannot specify a condition	Can specify a WHERE condition	No condition; removes all rows
Foreign Key Check	Fails if there are dependent FK	Complies with FK checks	Ignores FK constraints in some DBMS

Summary:
DROP: Permanently removes a table or object, including structure and data.
DELETE: Removes specific rows or all rows but keeps the table structure.
TRUNCATE: Quickly removes all rows but keeps the table structure; faster than DELETE for large datasets.


groupby
SELECT product_category, SUM(sales_amount) AS total_sales FROM sales
GROUP BY product_category;


having query
SELECT product_category, SUM(sales_amount) AS total_sales FROM sales
GROUP BY product_category
HAVING total_sales > 10000;


index use:-
create index studdob On students (dob); add multiple columns  //create index
show index from students;         //show index
drop index studdob On students;


table multiple case
UPDATE db.Table1 SET col2 = (CASE col2 WHEN 1 THEN 0 ELSE 1 END);


//second highest salary
SELECT MAX(amount) from salary_stuctures ss 
WHERE amount < (SELECT MAX(amount) from salary_stuctures ss2 ); 


what is transection?
A transaction in MySQL is a sequence of one or more SQL statements that are treated as a single,
indivisible unit of work. Transactions are used to maintain data integrity and consistency in a database


table  multiple case
UPDATE db.Table1 SET col2 = (CASE col2 WHEN 1 THEN 0 ELSE 1 END);


Migrations are scripts or instructions that specify how the database schema should change. 
Each migration corresponds to a specific, discrete change to the schema, such as creating a new table, adding or modifying columns, 
creating indexes, or defining relationships between tables. Migrations are typically versioned to ensure they are applied in a specific order.


Migrations are scripts or instructions that specify how the database schema should change. 
Each migration corresponds to a specific, discrete change to the schema, such as creating a new table, adding or modifying columns, creating indexes, or defining relationships between tables. Migrations are typically versioned to ensure they are applied in a specific order.


| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |
| 2 | Ramesh | 25 | Delhi | 1500.00 |
| 3 | kaushik | 23 | Kota | 2000.00 |
| 4 | kaushik | 25 | Mumbai | 6500.00 |
| 5 | Hardik | 27 | Bhopal | 8500.00 |
| 6 | Komal | 22 | MP | 4500.00 |
| 7 | Muffy | 24 | Indore | 10000.00 |

SELECT NAME, SUM(SALARY) FROM CUSTOMERS GROUP BY NAME;


  NAME | SUM(SALARY) |
+---------+-------------+
| Hardik | 8500.00 |
| kaushik | 8500.00 |
| Komal | 4500.00 |
| Muffy | 10000.00 |
| Ramesh | 3500.00 |


join example:-
right
left
full join
inner join
self
CARTESIAN join
CROSS JOIN

PRIMARY KEY: A primary key is a field in a table which uniquely identifies each row/record in a database table. Primary keys 
must contain unique values. A primary key column cannot have NULL values.

IN Operator
SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

The SQL BETWEEN Operator
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

The SQL COUNT(), AVG() and SUM() Functions


SQL HAVING Examples
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;


doubt?
11 orm what is meaning pros const with example
object oriented db
bson format
json bson