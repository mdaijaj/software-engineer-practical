1. What is a promise
A promise is an object that may produce a single value some time in the future with either a resolved value or a reason that it’s not resolved(for example, network error). 
It will be in one of the 3 possible states: fulfilled, rejected, or pending.

basic promise:-
const myPromise = new Promise((resolve, reject) => {
    let success = true; // Change this to false to see the rejection case
    if (success) {
        resolve("Promise fulfilled!");
    } else {
        reject("Promise rejected!");
    }
});

myPromise
    .then((message) => {
        console.log(message); // Output: "Promise fulfilled!" if success is true
    })
    .catch((error) => {
        console.error(error); // Output: "Promise rejected!" if success is false
    });


Why do you need a promise
Promises are used to handle asynchronous operations. They provide an alternative approach 
for callbacks by reducing the callback hell and writing the cleaner code.

What are the three states of promise
Promises have three states:
Pending: This is an initial state of the Promise before an operation begins
Fulfilled: This state indicates that the specified operation was completed.
Rejected: This state indicates that the operation did not complete. In this case an error value will be thrown.


What is promise chaining?
The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. 
Let's take an example of promise chaining for calculating the final result,

new Promise((resolve, reject)=> {
  setTimeout(() => resolve(10), 1000);
})
  .then((result)=> {
    console.log(result); // 10
    return result * 2;
  })
  .then((result)=> {
    console.log(result); // 20
    return result * 3;
  })
    .then((result)=> {
    console.log(result); // 60
    return result * 4;
  });



The usage of a promise would be as below,
1. basic promise:-
A basic promise is created using the Promise constructor, which takes an executor function with two parameters: resolve and reject.

const promise = new Promise((resolve, reject) => {
    const success = true; // Change this to false to see the rejection case
    if (success) {
        resolve("Operation was successful!");
    } else {
        reject("Operation failed.");
    }
});

promise
    .then(result => console.log(result)) // Handles success
    .catch(error => console.error(error)); // Handles failure

2. What is promise.all()
Promise.all is used to handle multiple promises. It takes an array of promises and resolves when all of the promises in the array have resolved,
or rejects if any promise in the array rejects.

const promise1 = Promise.resolve(1);
const promise2 = Promise.resolve(2);
const promise3 = Promise.resolve(3);

Promise.all([promise1, promise2, promise3])
    .then(results => console.log(results)) // Outputs: [1, 2, 3]
    .catch(error => console.error(error));

3. Promise.allSettled
Promise.allSettled is used to handle multiple promises and gets the result of all promises, regardless of whether they were fulfilled or rejected.

const promise1 = Promise.resolve(1);
const promise2 = Promise.reject("Error in promise 2");
const promise3 = Promise.resolve(3);

Promise.allSettled([promise1, promise2, promise3])
    .then(results => console.log(results));
    // Outputs: 
    // [
    //   { status: 'fulfilled', value: 1 },
    //   { status: 'rejected', reason: 'Error in promise 2' },
    //   { status: 'fulfilled', value: 3 }
    // ]


4. Promise.race
Promise.race takes an array of promises and resolves or rejects as soon as the first promise in the array resolves or rejects.
var promise1 = new Promise(function (resolve, reject) {
  setTimeout(resolve, 500, "one");
});
var promise2 = new Promise(function (resolve, reject) {
  setTimeout(resolve, 100, "two");
});

Promise.race([promise1, promise2]).then(function (value) {
  console.log(value); // "two" // Both promises will resolve, but promise2 is faster
});

5.Promise.any() 
Promise.any is used to handle multiple promises and resolves as soon as any of the promises resolved case only in the array.
It rejects if all promises in the array reject.
const promise1 = Promise.reject("Error in promise 1");
const promise2 = Promise.resolve(2);
const promise3 = Promise.reject("Error in promise 3");

Promise.any([promise1, promise2, promise3])
    .then(result => console.log(result)) // Outputs: 2
    .catch(error => console.error(error));



2. What are the pros and cons of promises over callbacks
Pros:
It avoids callback hell which is unreadable
Easy to write sequential asynchronous code with .then()
Easy to write parallel asynchronous code with Promise.all()
Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)
Cons:



3. express vs statement
Expression:-
An Expression is something which evaluates to a value, or which produce a value
or the value itself

statement:-
A bigger piece of code that is executed and which does not produce a value on
itself.



4. dom:- Document Object Model  :-
Structured representation of HTML document.
DOM allows JavaScript to access HTML elements and styles to manipulate i.e.
change text, HTML attributes, and even CSS styles
We will make JavaScript interact with the Webpage, Technically that is called
DOM manipulation


5. Scope Concepts
 Scoping: So scoping controls how our program's variables are organized and
accessed by the JavaScript engine.
So basically scoping asks the question, where do variables live?
Or where can we access a certain variable and where not?

 Lexical Scoping: means that the way variables are organized and accessed is entirely
controlled by the placement of functions and of blocks in the programs code
Ex: A function that is written inside another function has access to the variables of
the parent function.

 Scope: Scope is the space or environment in which a certain variable is declared.
Global, Function and Block Scope
 Scope of a variable: Entire region of our code, where a certain variable can be
accessed.


7. Immediately Invoked Functions Expressions (IIFE)
 Sometimes in JavaScript, we need a function that is only executed once. And then
never again..
 So basically a function that disappears right after it's called once.
 These are immediately invoked
(function() {
    // This is the function expression
    var message = "Hello, I am an IIFE!";
    console.log(message);
})();



8 What is a callback function
A callback function is a function passed into another function as an argument. This function is invoked inside the outer function to 
complete an action. Let's take a simple example of how to use callback function
ex1.
function callbackFunction(name) {
  console.log("Hello " + name);
}

function outerFunction(callback) {
  let name = prompt("Please enter your name.");
  callback(name);
}

outerFunction(callbackFunction);

Why do we need callbacks
The callbacks are needed because javascript is an event driven language. That means instead of waiting for a response javascript will keep executing while listening for other events. 
ex2.
function firstFunction() {
  // Simulate a code delay
  setTimeout(function () {
    console.log("First function called");
  }, 1000);
}
function secondFunction() {
  console.log("Second function called");
}
firstFunction();
secondFunction();

Output;
// Second function called
// First function called
As observed from the output, javascript didn't wait for the response of the first function and the remaining code block got executed. 
So callbacks are used in a way to make sure that certain code doesn’t execute until the other code finishes execution.



8. What is callback in callback
You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks.

loadScript("/script1.js", function (script) {
  console.log("first script is loaded");

  loadScript("/script2.js", function (script) {
    console.log("second script is loaded");

    loadScript("/script3.js", function (script) {
      console.log("third script is loaded");
      // after all scripts are loaded
    });
  });
});


9. What is a callback hell?
Callback hell is when we have a lot of nested callbacks in order to execute asynchronous tasks in sequence.
which makes code hard to read 
and debug when dealing with asynchronous logic. The callback hell looks like below,
// // Nested callback hell
// doTask1(function () {
//     doTask2(function () {
//         doTask3();
//     });
// });


10 What is a prototype chain
Prototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language.
The prototype on object instance is available through Object.getPrototypeOf(object) or __proto__ property whereas prototype on constructors function is available through Object.prototype.


11. What is the difference between proto and prototype
The __proto__ object is the actual object that is used in the lookup chain to resolve methods, etc. 
Whereas prototype is the object that is used to build __proto__ when you create an object with new.

new Employee().__proto__ === Employee.prototype;
new Employee().prototype === undefined;
There are few more differences,

feature	Prototype	proto
Access	All the function constructors have prototype properties.	All the objects have __proto__ property
Purpose	Used to reduce memory wastage with a single copy of function	Used in lookup chain to resolve methods, constructors etc.
ECMAScript	Introduced in ES6	Introduced in ES5
Usage	Frequently used	Rarely used


How do you create an object with prototype
The Object.create() method is used to create a new object with the specified prototype object and properties. i.e, It uses an existing object as the prototype of the newly created object. It returns a new object with the specified prototype object and properties.

const user = {
  name: "John",
  printInfo: function () {
    console.log(`My name is ${this.name}.`);
  },
};

const admin = Object.create(user);

admin.name = "Nick"; // Remember that "name" is a property set on "admin" but not on "user" object

admin.printInfo(); // My name is Nick


How do you set prototype of one object to another
You can use the Object.setPrototypeOf() method that sets the prototype (i.e., the internal Prototype property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows,

Object.setPrototypeOf(Square.prototype, Rectangle.prototype);
Object.setPrototypeOf({}, null);


13. What is the currying function
Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions 
each with only a single argument
Let's take an example of n-ary function and how it turns into a currying function,

const multiArgFunction = (a, b, c) => a + b + c;
console.log(multiArgFunction(1, 2, 3)); // 6

const curryUnaryFunction = (a) => (b) => (c) => a + b + c;
curryUnaryFunction(1); // returns a function: b => c =>  1 + b + c
curryUnaryFunction(1)(2); // returns a function: c => 3 + c
curryUnaryFunction(1)(2)(3); // returns the number 6
Curried functions are great to improve code reusability and functional composition.



14. What are closures
A closure is the combination of a function and the lexical environment within which that function was declared. 
It is an inner function that has access to the outer or enclosing function’s variables. The closure has three scope chains

Own scope where variables defined between its curly brackets
Outer function’s variables
Global variables


15 What is a first order function
First-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value.

const firstOrder = () => console.log("I am a first order function!");


16 What is a higher order function
Higher-order function is a function that accepts another function as an argument or returns a function as a return value or both.

const firstOrderFunc = () =>
  console.log("Hello, I am a First order function");
const higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();
higherOrder(firstOrderFunc);



17. What is a pure function
A Pure function is a function where the return value is only determined by its arguments without any side effects. i.e, 
If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.
pure function
function add(a, b) {
  return a + b;
}
console.log(add(2, 3)); // 5
console.log(add(2, 3)); // 5
console.log(add(2, 3)); // 5


15 Impure function
let counter = 0;
function increment() {
    counter += 1;
    return counter;
}
console.log(increment()); 1
console.log(increment()); 2
console.log(increment()); 3


What are the differences between pure and impure functions?
Pure function	                        Impure function
It has no side effects	                It causes side effects
It is always return the same result	    It returns different result on each call
Easy to read and debug	                Difficult to read and debug because they are affected by extenal code



18 What are the differences between undeclared and undefined variables
undeclared	undefined
These variables do not exist in a program and are not declared	
If you try to read the value of an undeclared variable, then a runtime error is encountered	

These variables declared in the program but have not assigned any value
If you try to read the value of an undefined variable, an undefined value is returned.


19.undefined vs null 
Undefined:- Undefined is the default value of something which has never been assign.
            It is a primitive type. When you use typeof undefined, it returns "undefined".

null:- Null is quite similar to undefined but it is not a default value of anything.
        It is an object type. When you use typeof null, it returns "object".

20 What is a strict mode in javascript
Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression "use strict"; instructs the browser to use the javascript code in the Strict mode.


Why do you need strict mode
Strict mode is useful to write "secure" JavaScript by notifying "bad syntax" into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.


How do you declare strict mode
The strict mode is declared by adding "use strict"; to the beginning of a script or a function. If declared at the beginning of a script, it has global scope.

"use strict";
x = 3.14; // This will cause an error because x is not declared
and if you declare inside a function, it has local scope

x = 3.14; // This will not cause an error.
myFunction();

function myFunction() {
  "use strict";
  y = 3.14; // This will cause an error
}



21 What is Hoisting?
Hoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their scope before code execution. 

console.log(message); //output : undefined
var message = "The variable Has been hoisted";
message is hoisted but output undefined error handling,


var message;
console.log(message);  // undefined
message = "The variable Has been hoisted";
message is hoisted but output undefined error handling,


message("Good morning"); 
function message(name) {
  console.log(name);   //Good morning
}
This hoisting makes functions to be safely used in code before they are declared.



22 What is the Temporal Dead Zone
The Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, 
accessing a let or const variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable’s binding and its declaration, is called the temporal dead zone.


function somemethod() {
  console.log(counter1); // undefined
  console.log(counter2); // ReferenceError  its call temporal dead zone.
  var counter1 = 1;
  let counter2 = 2;
}
somemethod()



23 What is a polyfill
A polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it.
Why Use a Polyfill?
  Backward Compatibility: Ensures that web applications or scripts work in older browsers that do not support the latest features of the language.
  Cross-Browser Compatibility: Makes sure that your application behaves consistently across different browsers and versions.
  Progressive Enhancement: Allows developers to use the latest features while still providing fallback support for users with outdated browsers.


24 What is IIFE(Immediately Invoked Function Expression)
IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. 

(function () {
  // logic here
})();
The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. 
If you try to access variables with IIFE then it throws an error as below,

(function () {
  var message = "IIFE";
  console.log(message);
})();
console.log(message); //Error: message is not defined



25 What is scope in javascript
Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code



26 What is a Cookie
A cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs.
Why do you need a Cookie
Cookies are used to remember information about the user profile(such as username). It basically involves two steps,
When a user visits a web page, the user profile can be stored in a cookie.
Next time the user visits the page, the cookie remembers the user profile.


What are the options in a cookie?
By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).
document.cookie = "username=John;  expires=Sat, 8 Jun 2019 12:00:00 UTC";
By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.
document.cookie = "username=John; path=/services";

How do you delete a cookie
You can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in this case. 
For example, you can delete a username cookie in the current page as below.

document.cookie =
  "username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;";
Note: You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't allow to delete a cookie unless you specify a path parameter.


What are the differences between cookie, local storage and session storage
Below are some of the differences between cookie, local storage and session storage,

Feature	Cookie	Local storage	Session storage
Accessed on client or server side	Both server-side & client-side	client-side only	client-side only
Lifetime	As configured using Expires option	until deleted	until tab is closed
SSL support	Supported	Not supported	Not supported
Maximum data size	4KB	5 MB	5MB


29 What is an anonymous function
An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function.

function (optionalParameters) {
  //do something
}

const myFunction = function(){ //Anonymous function assigned to a variable
  //do something
};

[1, 2, 3].map(function(element){ //Anonymous function used as a callback function
  //do something
});

var x = function (a, b) {
  return a * b;
};
var z = x(5, 10);
console.log(z); // 50



30 What is a first class function
First-class functions means when functions in that language are treated like any other variable.
For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener
const handler = () => console.log("This is a click handler function");
document.addEventListener("click", handler);



31 What is a constructor method
The constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used.
example:-
class Employee {
  constructor() {
    this.name = "John";
  }
}
var employeeObject = new Employee();
console.log(employeeObject.name); // John




32 What is the difference between Shallow and Deep copy
There are two ways to copy an object,
Shallow Copy: Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, 
just the reference addresses are copied i.e., only the memory address is copied.


33 array method?
1. map: return new array, 
2. foreach: same job but return undefined, 
3. filter: selected subset multiple element from an array, 

4. reduce:
the reduce() method is an array method used to reduce an array to a single value. 
It applies a provided function to each element of the array (from left to right) to reduce it to a single value. 
The reduce() method takes a callback function as its argument, and this function is applied to each element of the array.
syntax:-
array.reduce(callback, initialValue);

const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((accumulator, currentValue) => {
  return accumulator + currentValue;
}, 0);
console.log(sum); // Output: 15

5. slice:-
Doesn't modify the original array(immutable)
Returns the subset of original array or create new array
Selection item return karta hai
Let arr=[12,14,16,18]
newdat=arr.slice(-2,4)
console.log(newdat)  //[16,18]
  

6. splice: 
Modifies the original array(mutable)
Returns the deleted elements as array
Adds or removes elements from an array at a specified index. It can be used to both add and remove elements.
Let arr=[12,14,16,18]
Let newdata=arr.splice(2,1)  //  [12,14,18]  remove first element from 2index
console.log(newdata)// [16] show delete item



34. What is event bubbling and event capturing in Javascript
35. How many way to create object in Javascript
36. What is object.seal and object.freeze in Javascript
37. What is Weakmap and Weakset in Javascript
38. What is sessionStorage, localStorage , cookie,
39. What is generator function in Javascript

