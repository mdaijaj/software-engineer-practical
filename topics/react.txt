class base component life cycle method:-
constructor
rendor
componentDidMount  -- first time loading    //useEffect  mounting birth  we should api call and async process in this phase 
componentDidUpdate   -- update time load
componentwillUnmount   --remove from component  dead phase

example:-
componentDidMount()=>{
  // Called after the component is inserted or add into the DOM
  console.log("first time loading then call this function, componentDidMount working here...")
}
`
componentDidUpdate(prevProps, prevState) {
  console.log(" when anyupdate call this function,  componentDidUpdate is working here...)
}

componentWillUnmount=()=>{
  // Called right before the component is removed from the DOM
  console.log("when you will remove any component then it will call this function working...   component remove..")
}


function base component life cycle method:-
useState()
return()
useEffect()

//componentDidMount phase
useEffect(()=>{
  console.log("componentDimount is working...")    //infinite loop time or each time any event called
})

//componentDidMount phase
useEffect(()=>{
  console.log("componentDimount is working...")    //one time time
}, [])


//update phase
useEffect((number)=>{
  console.log("componentDidUpdate is working...")    //
}, [number])


//remove component phase:-  cleanup function
useEffect((number)=>{
  console.log("function component updating is working...")
  return ()=>{
    console.log("function component removing here...")
  }
}, [number]);


2 hoc(higher order component)
when component pas as a props input component and return output component that is call hoc
when component pass as argument of funcion return inside function thats call hoc
a hoc is a advanced technique in React for reusing component logic.

2.why use hoc?
same logic when we use same component logic different component so we used hoc.

import './App.css';
import React, { useRef, useState } from 'react'
function App() {
  return (
    <div className="App">
      <h1>HOC </h1>
      <HOCRed cmp={Counter} />
      <HOCGreen cmp={Counter} />
      <HOCBlue cmp={Counter} />
    </div>
  );
}

function HOCRed(props){
  return <h2 style={{backgroundColor:'red',width:100}}>Red<props.cmp /></h2>
}
function HOCGreen(props){
  return <h2 style={{backgroundColor:'green',width:100}}>Grren<props.cmp /></h2>
}
function HOCBlue(props){
  return <h2 style={{backgroundColor:'blue',width:100}}>blue <props.cmp /></h2>
}

function Counter(){
  const [count,setCount]=useState(0)
  return<div>
    <h3>{count}</h3>
    <button onClick={()=>setCount(count+1)}>Update</button>
  </div>
}
export default App;


7 hooks:-
useState:  Manages state. 
useEffect: Manages side effects
useMemo: Memoizes values for performance optimization
useCallback: Memoized the functions.
useRef: Accesses DOM elements or persists values 
useContext : solve the prop drilling proablem same functionality of redux
useReducer: Manages complex state logic
useLayoutEffect: Synchronously runs after DOM mutations and useEffect work asynChoronously
customeHook: self make own hook component


useState():-
The useState hook is used to add state to functional components.

import React, { useState } from 'react';
function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

useEffect():-
The useEffect hook is used to perform side effects in function components, such as fetching data or directly manipulating the DOM.

import React, { useState, useEffect } from 'react';
function Timer() {
  const [time, setTime] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setTime(time + 1);
    }, 1000);
  }, [time]);

  return <div>Time: {time} seconds</div>;
}


useCallback():-
function store in cache same useMemo funcionality in funcion
memoize the function
code optimization handle performance manage stop loop or rerendor 
optimization component reredering
refrential equality of function
application well performance 
stop unnessessary or unwantage funcion invoke 


useMemo():-
1 well application performance from cache
2 result ko cache me store kar raha hai next time wo caches se utha lega
3 unwantage function call not use event call so use memo
  memoize the function value
  code optimization handle
  optimization component reredering
  refrential equality of function


useContext:-
  data pass multiple level grandparent to child
  instead of redux for data pass
  component a pass to component b pass component c;
  prop drilling se bachne ke liye useContext() use karte hai


useReducer:-
  state management
  Manages complex state logic
  and use redux
  action with dispatch and store


useRef:- when click then highlight color
  rerender do'nt lost state object 
  access dom property or funcion
  rerender component stop unwantage reredering or stop reredering
  style color focus value etc handle using hooks
  it like a useState only and its preserve the value. No rerender
  use ref change property
  form validation, colors, focus while use only emergency

function CustomTextInput(props) {
  // textInput must be declared here so the ref can refer to it
  const textInput = useRef(null);
  
  function handleClick() {
    textInput.current.focus();
    textInput.current.style.display="none"
  }

  return (
    <div>
      <input
        type="text"
        ref={textInput} />
      <input
        type="button"
        value="Focus the text input"
        onClick={handleClick}
      />
    </div>
  );
}



Redux Data Flow:-
Action → Reducer → Store → View (React Component)

1.Action
2.Reducer
3.Store
4. View (React Components)


1. action:-
what i do?
An action is a plain JavaScript object that describes what happened in the application. It typically contains two things: 
a type (describes the action)
a payload (additional data needed by the reducer to update the state).

Dispatching an Action:

example:-
const incrementAction = {
  type: 'INCREMENT',
  payload: 1
};

store.dispatch(incrementAction);


2. reducer:
how to do?
A reducer is a pure function that takes the current state and an action as arguments, and returns the new state. 
It specifies how the application's state changes in response to the action.

example:-
const counterReducer = (state = 0, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return state + action.payload;
    case 'DECREMENT':
      return state - action.payload;
    default:
      return state;
  }
};


3. store:-
all the data store
The store is the central place where the entire state of the application is stored. It holds the state tree, 
allows access to the current state, and lets you dispatch actions.

example:-
import { createStore } from 'redux';
const store = createStore(counterReducer);

store.subscribe(() => {
  console.log(store.getState());
});


4. View display:-
React components (or views) connect to the Redux store to retrieve data (state) and display it. When a user interacts with the UI, the components dispatch actions to modify the state.
To connect React components with Redux, the connect function or useSelector (for hooks) is used to access the state, and dispatch is used to send actions.

import React from 'react';
import { useSelector, useDispatch } from 'react-redux';

const Counter = () => {
  const count = useSelector(state => state);
  const dispatch = useDispatch();
  
  return (
    <div>
      <p>{count}</p>
      <button onClick={() => dispatch({ type: 'INCREMENT', payload: 1 })}>
        Increment
      </button>
    </div>
  );
};
export default Counter;


Conclusion:-
Dispatch actions that describe state changes.
Reducers update the state based on actions.
Store holds and provides the updated state.
React components use the updated state to render UI.


state vs props?
props:-
used for data pass one component to another component
it's unmutalble

state:-
state varible use manage state or updating state

jsx:-
its all html in component inside html in js used thats called jsx(html js ka mukut)


conditional rendering:-
const { useState, useEffect } = React;
const TodoRemaining = () => <div>Remaining</div>;
const TodoDone = () => <div>Done</div>;

const TodoDisplay = () => {
  const [isPreview, setIsPreview] = useState(true);

  return (
    <div>
      {isPreview ? <TodoRemaining /> : <TodoDone />}
      <label htmlFor="change">
        <input
          type="checkbox"
          id="change"
          onChange={() => setIsPreview(!isPreview)}
        />
        Change
      </label>
    </div>
  );
};
export default TodoDisplay;


//list key special key for update or deleting particular item.
function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    <ListItem key={number.toString()} value={number} />
  );
  return (
    <ul>
      {listItems}
    </ul>
  );
}


bind or arrow use function onClick function call.
example:-

<button onClick={this.increment.bind(this)}> click me </button>  //es5
<button onClick={()=>{this.increment()}}> click me </button>     //es6


//composing
same component different props or data use compositing as work inheritance
reuse multiple component 


webpack:-
when we create setup react proeject it automatic install webpack and bebel it is a format bundal a files that is called webpack. 
sari files ko ek bunle ke form me rakhti hai
when we proeject setu p npx create react app application all files bundle using webpack


bebel
es6 and moden javascript ko convert to browser understandable code
inside javascript we write code html in js using bebel it convert to html in javascript code.

dom
its is a object presentation of the html document in tree structure in browser
document  html document not pdf document
object   element like h2 body head tag or object or element
model all dom presentation organized way  || completed html document
 
virtual dom:-
virtual dom is a light-wight in memoray represent of actual dom.
it is use improve performance
virtual dom is replica of original dom
and modification any particular things


shadow dom :=
main dom ke ander hidden dom hota hai bahar wale dom ka style design ka impact nhi aata hai use hi
shadow dom kahte hai.
why?
if class match then overwrite


control component
input field can be control by react state like useState() control
using useState
state can be predictable

function ControlledForm() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const handleNameChange = (event) => {
    setName(event.target.value);
  };

  const handleEmailChange = (event) => {
    setEmail(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    alert(`Name: ${name}, Email: ${email}`);
  };

  return (
    <>
      <label> Name:
        <input type="text" value={name}  onChange={handleNameChange} />
      </label>

      <label> Email:
        <input type="text" value={email}  onChange={handleEmailChange} />
      </label>
    </>
  )
}


uncontrole:-
import React, { useRef } from 'react';

function UncontrolledForm() {
  const nameInputRef = useRef(null);
  const emailInputRef = useRef(null);

  const handleSubmit = (event) => {
    event.preventDefault();
    const name = nameInputRef.current.value;
    const email = emailInputRef.current.value;
    alert(`Name: ${name}, Email: ${email}`);
  };
}
  

use useRef 
input field honi chahiye
input field can be control by useRef() or javascript document like document.getElmentBy
state can not be predictable.


fetch vs axios:-
fetch:-
json.stringfy()
fetch me two parameter(url, option)
after response convert to json.stringfy()
body: me json.stringfy()  data pass hota hai

axios:-
only one parameter(option)
data: normal object;
response status.code we can error handle click easily.


fragment use for remove extra div like child colum remove div


pure component is a class component like useMemo
it work like stop re-rendering multi time.
if name is same onClick function then they are not re-render component.

pure component example 
useSearchParams() // for query data get
outLet:- is related to nested routing.


reactjs vs vanillajs
variarble query it's difficult to understand
class value where we can get data in vanilla js using query
data SELECT munuall


component 3 category
stateless component  
no state use only Content
small and resulable

statefull component 
state variarble use in component
have state still resulable

structure component 
pages layout or screens of app 
huge and none resulable


compositing component?
we can prop drilling to use children component call to solve prop drilling problem.
we can also passing element as props alternative


28 What is the use of preventDefault method
The preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, 
prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.

document
  .getElementById("link")
  .addEventListener("click", function (event) {
    event.preventDefault();
  });
Note: Remember that not all events are cancelable.


// ● How can you improve performance of your react app?
1.Optimize Component Rendering
Avoid Unnecessary Renders: Use React.memo to prevent re-rendering of functional components unless their props change.
Use useCallback to memoize event handlers.
Use useMemo to memoize expensive calculations.

2.Optimize State Management
  Avoid unnecessary state:
  const [count, setCount] = useState(0);

3. Minimize Third-Party Dependencies
Only include necessary dependencies. Avoid heavy libraries unless indispensable.
Tree-shake unused code with tools like Webpack.

4. Lazy Loading Components
	Load components only when they are needed, reducing the initial load time.

5. Code Splitting
	Breaks up your app into smaller bundles that can be loaded on demand.
  Configure Webpack for code splitting to load only the required parts of your application.

6.Avoid Anonymous Functions in JSX
  Why: Creating functions in the JSX can lead to unnecessary re-renders as a new function is created every time the component renders.
    // Bad
  <button onClick={() => handleClick(id)}>Click Me</button>

  // Good
  const handleButtonClick = () => handleClick(id);
  <button onClick={handleButtonClick}>Click Me</button>

7. Optimize Conditional Rendering
	Use short-circuit operators or ternary operators for cleaner and more efficient conditional rendering.

8. Consider Server-Side Rendering (SSR)
  Why: For faster initial page load and SEO benefits, you can implement SSR with frameworks like Next.js.
  Why: For large lists, use libraries like react-window or react-virtualized to only render visible items.

9. Optimize Images and Assets
  What to do: Use optimized images, SVGs, and other assets. You can also lazy-load images to improve initial load time.
  Use responsive and lazy-loaded images. Libraries like react-lazyload or react-intersection-observer help with this.
  Use modern image formats like WebP for smaller file sizes.

10. Use Production Build
Use the production build of React by running npm run build. This minifies and optimizes your code for deployment.

12. Optimize API Calls
Cache API responses using libraries like SWR or React Query.
Batch multiple API requests where possible.

13. Optimize CSS
Use CSS-in-JS solutions like Emotion or Styled-components for scoped styling.
Remove unused CSS with tools like PurifyCSS.


30 What is a service worker?
A Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don't need a web page or user interaction. 
Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, 
push notifications, intercept and handle network requests and programmatically managing a cache of responses.




store:- it holds whole data of application
reduce:- what manipulate that data when it recieved an action
action:- what tells reducer to manipute the store data it carrrie the name and some oher data. 

flow:-
Reducer:- action ko change karne me help karenga

main.js or index.js :- provider rape with store

counter manage(any functinality):- counter_slice make multiple method or function

store: counter_slice introduct in store



fetch("https://example.com/api", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "X-CSRF-Token": "your_csrf_token",
  },
  body: JSON.stringify({ data: "some_data" }),
});


// de-bouncing
// when we search bar like product name no function invoke each keybaord after search word few mili second function invoke it's call de-bouncing.
 // when we scroll and resize window or component that it stop unwantage or un-nessary function invoke using de-bouncing 


import React, { useState, useEffect } from "react";

const SearchComponent = () => {
  const [query, setQuery] = useState("");
  const [debouncedQuery, setDebouncedQuery] = useState(query);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedQuery(query);
    }, 500); // 500ms delay

    return () => clearTimeout(timer); // Cleanup previous timer
  }, [query]);

  useEffect(() => {
    if (debouncedQuery) {
      console.log("Fetching results for:", debouncedQuery);
      // Call API or perform action
    }
  }, [debouncedQuery]);

  return (
    <div>
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search..."
      />
      <p>Search Query: {debouncedQuery}</p>
    </div>
  );
};

export default SearchComponent;
