middleware
query optionmiztion
data modeling
statefull stateless

rest api how to statefull
web hook
sop
coverd collection
rest api optionmiztion
redis
sharding implement
orm


jwt
algo256
payload
verify signature (secret key)

usecase of jwt
authentication and authority
token expiry
refresh   tocken



acid
transection
ddl mml
mongodb id size
ssc vs ssr


const inputStrings = ["Delhi", "Banglore", "Hyderabad"];
const specifiedValue = 36;
const arr = [];

for(var i=0;i<inputStrings.length;i++){
    var obj = {}
    obj[inputStrings[i]] = specifiedValue
    arr.push(obj)
}
console.log(arr)
console.log(JSON.stringify(arr))


//OUTPUT:-
//[
// { "Delhi": 36 },
// { "Banglore": 36 },
// { "Hyderabad": 36 }
// ]


function showMessage(marks){
    const message = marks || 'Absent';
    console.log(`${marks} ${message}`)
}

showMessage(29);
showMessage(0);
showMessage(46);




console.log('Start');

setTimeout(() => console.log('Timeout 1'), 0);

setImmediate(() => console.log('Immediate'));

process.nextTick(() => console.log('Next Tick'));

Promise.resolve().then(() => console.log('Promise'));

console.log('End');






// console.log(0 == -0);       // true
// console.log(0 === -0);      // true
// console.log(0 === "-0");      // false

// OLX Interview
const number = 21;
// console.log(number.toString());   // 21
console.log(number.toString(2));   //       this will return number 
console.log(number.toString(8));    // octal number system
console.log(number.toString(16));   //hexadecimal number system



oriserve.com company
acid
scallable mysql and mongodb which is more or less scallable with exmaple
index structure while using indexing
partition database or schema design
send message to user 30 min how will you manage handle
drawback of these things





react validatation
test("/input ")
intersec in reactjs





react Interview
portal
error baunding
suspense
react memo
thunk 
builder
jwt session cookies
redux work flow




nodejs
cluster
stream method zed
cluster
isPrimary
fork
spawn
event loop
call stack
event emitter
task queue
rejex test method
aws public and private(same bucket)
repl







database:-
acid
transection
index


//testing
cummnication profession way voice action
understaning way
clear concept fuctinality exam functinaty
selling product();




console level question?
for(var i =0; i< 5; i++){
console.log(i)
  setTimeout(() => {
    console.log(i)
  }, 3000)
console.log(i*2)
}
//0 0 1 2 2 4 3 6 4 8 5 5 5 5 5



for(var i =0; i< 5; i++){
  setTimeout(() => {
    console.log(i)
  }, 3000)
}   // 5 5 5 5 5




company ngo
//

let arr=[{
    id: 1,
    type:  "cast",
    name: "rahul"
},
{
    id: 2,
    type:  "cast2",
    name: "prince"
},{
    id: 3,
    type:  "cast3",
    name: "aman"
},{
    id: 4,
    type:  "cast2",
    name: "price"
},{
    id: 5,
    type:  "cast3",
    name: "rahul"
}
]

let result= arr.filter((item)=> item.type!=="cast2")
// console.log(result)



function filterList(filterByProperty, isEqual, value){
    return isEqual? arr.filter((item)=> item[filterByProperty] == value) : arr.filter((item)=> item[filterByProperty] !== value)
}

console.log(filterList("type", false, "cast2"))
console.log(filterList("name", true, "rahul"))


//return list of object other then specefy type.  
//list of object which name is rahul



optionmiztion query
drop table if exists locations;
create table locations (id int primary key, name text, parent_location_id int null, user_status boolean);
insert into locations (id, name, user_status) values
            (1, 'Karnataka', 1),
            (2, 'Assam', 0),
            (3, 'Kerala', 1);
insert into locations (id, name, parent_location_id, user_status) values
            (5, 'Bangalore', 1),
            (6, 'Mysore', 1, 1),
            (7, 'Guwahati', 2, 1),
            (8, 'Cochin', 3, 0);
insert into locations (id, name, parent_location_id, user_status) values
            (9, 'Jaynagar', 5,0),
            (10, 'Hebbal', 5,1),
            (11, 'Rajiv Nagar', 6, 1),
            (12, 'Srirampura', 6, 0),
            (13, 'Panjabari', 7, 1),
            (14, 'Lokhra', 7, 0),
            (15, 'Jew town', 8, 1);

select locations1.name from locations as locations1 join locations as locations2 
on locations1.id= locations2.parent_location_id where locations2.name="Bangalore";

select name from locations where id=(select parent_location_id from locations where name="Bangalore");




slk company Interview
// console.log("Start");
 
// Promise.resolve().then(() => {
//   console.log("First Promise");
//   return Promise.resolve();
// }).then(() => {
//   console.log("Second Promise");
//   setTimeout(() => {
//     console.log("Inside Timeout");
//   }, 0);
// });
 
// console.log("End");


// // start
// // end
// // first Promise
// // second promise
// // inside timeout


// function mul(a){
//     return function(b){
//         return function (c){
//             return a*b*c;
//         }
//     }
// }
// let result=mul(3)(4)(5)
// console.log(result)


let arr=[1,2,3,4,3,4,5,5,5,6,7]
let main=[];
for (var i=0; i<arr.length; i++){
    if(!main.includes(arr[i])){
        main.push(arr[i])
    }
}
console.log(main)



life cycle method
event loop
redux 
state variable
middleware function
cors module
multer



UPDATE db.Table1 SET col2 = (CASE col2 WHEN 1 THEN 0 ELSE 1 END);



 


// Execution Order and Explanation
1. Synchronous code executes first:
2. process.nextTick is executed before other microtasks in the current phase of the event loop.
    It's processed right after the synchronous code, as it's the highest-priority microtask.
3. Microtasks from Promises and queueMicrotask are executed in the order they were queued:
4. setTimeout (macrotask) runs last:



//macro task
setTimeout(()=>{
    console.log("in timeout")   //macro task
},0)



const a = new Promise((resolve,reject)=>{   syncronous
    console.log("Promise const")
    resolve()
});

console.log("First")   syncronous

a.then(()=>{
    console.log("Promise resolved")    promise
})

console.log("Outside")    syncronous

queueMicrotask(()=>{     next promise queue microtask
    console.log("in queue microtask") 
})


// process.nextTick is executed before other microtasks in the current phase of the event loop.
// It's processed right after the synchronous code,
process.nextTick(()=>{    
    console.log("inside nexttick")
})


// Promise const
// First
// Outside
// inside nexttick
// Promise resolved
// in queue microtask
// in timeout


